syntax = "proto3";

package backend;

service Backend {
  rpc Concurrency(ConcurrencyRequest) returns (ConcurrencyReply) {}
  rpc WriteFile(WriteFileRequest) returns (WriteFileReply) {}
  rpc ReadFile(ReadFileRequest) returns (ReadFileReply) {}
  rpc WriteSymlink(WriteSymlinkRequest) returns (WriteSymlinkReply) {}
  rpc ReadSymlink(ReadSymlinkRequest) returns (ReadSymlinkReply) {}
  rpc WriteTree(WriteTreeRequest) returns (WriteTreeReply) {}
  rpc ReadTree(ReadTreeRequest) returns (ReadTreeReply) {}
  rpc WriteCommit(Commit) returns (WriteCommitReply) {}
  rpc ReadCommit(ReadCommitRequest) returns (ReadCommitReply) {}
}

message ConcurrencyRequest {}
message ConcurrencyReply {
  int32 estimated_concurrency = 1;
}

// File

message WriteFileRequest {
  string path = 1;
}
message WriteFileReply {}

message ReadFileRequest {
  string path = 1;
}
message ReadFileReply {}

// Symlink

message WriteSymlinkRequest {
  string path = 1;
}
message WriteSymlinkReply {}

message ReadSymlinkRequest {
  string path = 1;
}
message ReadSymlinkReply {}

// Tree

message WriteTreeRequest {
  string path = 1;
}

message WriteTreeReply {}

message ReadTreeRequest {
  string path = 1;
}
message ReadTreeReply {}

message TreeValue {
  message File {
    bytes id = 1;
    bool executable = 2;
  }

  oneof value {
    File file = 2;
    bytes symlink_id = 3;
    bytes tree_id = 4;
    bytes conflict_id = 5;
  }
}

message Tree {
  message Entry {
    string name = 1;
    TreeValue value = 2;
  }

  repeated Entry entries = 1;
}

// Commit

message WriteCommitRequest {
  string path = 1;
  Commit commit = 2;
}
message WriteCommitReply {}

message ReadCommitRequest {
  string path = 1;
}
message ReadCommitReply {}

message Commit {
  repeated bytes parents = 1;
  repeated bytes predecessors = 2;
  // Alternating positive and negative terms
  repeated bytes root_tree = 3;
  // TODO(#1624): delete when all code paths can handle this format
  bool uses_tree_conflict_format = 8;
  bytes change_id = 4;
  string description = 5;

  message Timestamp {
    int64 millis_since_epoch = 1;
    int32 tz_offset = 2;
  }
  message Signature {
    string name = 1;
    string email = 2;
    Timestamp timestamp = 3;
  }
  Signature author = 6;
  Signature committer = 7;
  optional bytes secure_sig = 9;
}

//message Conflict {
//  message Term {
//    TreeValue content = 1;
//  }
//
//  repeated Term removes = 1;
//  repeated Term adds = 2;
//}
