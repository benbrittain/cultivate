syntax = "proto3";

package backend;

service Backend {
  // Initalize a new repository
  rpc Initialize(InitializeReq) returns (InitializeReply) {}

  // Working copy related calls
  rpc SetCheckoutState(SetCheckoutStateReq) returns (SetCheckoutStateReply) {}
  rpc GetCheckoutState(GetCheckoutStateReq) returns (CheckoutState) {}

  rpc GetTreeState(GetTreeStateReq) returns (GetTreeStateReply) {}

  rpc Snapshot(SnapshotReq) returns (SnapshotReply) {}

  // Store related calls
  rpc Concurrency(ConcurrencyRequest) returns (ConcurrencyReply) {}

  rpc GetEmptyTreeId(GetEmptyTreeIdReq) returns (TreeId) {}

  rpc WriteTree(Tree) returns (TreeId) {}
  rpc ReadTree(TreeId) returns (Tree) {}

  rpc WriteFile(File) returns (FileId) {}
  rpc ReadFile(FileId) returns (File) {}

  rpc WriteSymlink(Symlink) returns (SymlinkId) {}
  rpc ReadSymlink(SymlinkId) returns (Symlink) {}

  rpc WriteCommit(Commit) returns (CommitId) {}
  rpc ReadCommit(CommitId) returns (Commit) {}
}


message InitializeReq {
  string path = 1;
}

message InitializeReply {}

message SnapshotReq {
  string working_copy_path = 1;
}

message SnapshotReply {
  bytes tree_id = 1;
}

message GetTreeStateReq {
  string working_copy_path = 1;
}
message GetTreeStateReply {
  bytes tree_id = 1;
}

message GetEmptyTreeIdReq {}

message ConcurrencyRequest {}
message ConcurrencyReply {
  int32 estimated_concurrency = 1;
}

// File

message CheckoutState {
  bytes op_id = 1;
  bytes workspace_id = 2;
}

message SetCheckoutStateReply{}

message SetCheckoutStateReq {
  string working_copy_path = 1;
  CheckoutState checkout_state = 2;
}

message GetCheckoutStateReq {
  string working_copy_path = 1;
}

message FileId {
  bytes file_id = 1;
}

message File {
  bytes data = 1;
}

// Symlink

message Symlink {
  string target = 1;
}
message SymlinkId {
  bytes symlink_id = 1;
}

// Tree

message TreeId {
  bytes tree_id = 1;
}

message TreeValue {
  message File {
    bytes id = 1;
    bool executable = 2;
  }

  oneof value {
    File file = 2;
    bytes symlink_id = 3;
    bytes tree_id = 4;
    bytes conflict_id = 5;
  }
}

message Tree {
  message Entry {
    string name = 1;
    TreeValue value = 2;
  }

  repeated Entry entries = 1;
}

// Commit

message CommitId {
  bytes commit_id = 1;
}

message Commit {
  repeated bytes parents = 1;
  repeated bytes predecessors = 2;
  // Alternating positive and negative terms
  repeated bytes root_tree = 3;
  // TODO(#1624): delete when all code paths can handle this format
  bool uses_tree_conflict_format = 8;
  bytes change_id = 4;
  string description = 5;

  message Timestamp {
    int64 millis_since_epoch = 1;
    int32 tz_offset = 2;
  }
  message Signature {
    string name = 1;
    string email = 2;
    Timestamp timestamp = 3;
  }
  Signature author = 6;
  Signature committer = 7;
  optional bytes secure_sig = 9;
}

//message Conflict {
//  message Term {
//    TreeValue content = 1;
//  }
//
//  repeated Term removes = 1;
//  repeated Term adds = 2;
//}
